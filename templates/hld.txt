#include<bits/stdc++.h>

using namespace std;

#define ll long long
#define fr(m) for(int i=0; i<m; i++)
#define fro(m) for(int i=1; i<m; i++)
#define frj(m) for(int j=0; j<m; j++)
#define frr(n) for(int i=n; i>=0; i--)
#define pb push_back
#define pf push_front
#define orr ||
#define nl '\n'
#define nll cout<<'\n'
#define mod 1000000007
#define inf (1LL<<62)
#define inff (1<<30)
#define yes cout<<"YES"<<nl
#define no cout<<"NO"<<nl
#define ff first
#define ss second
#define all(v) v.begin(), v.end()
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL)
#define mxn 200005

vector<int>g[mxn];
int n, q;
int val[mxn], sub[mxn], dep[mxn], par[mxn];
int idx=0, head[mxn], seg[4*mxn];
int in[mxn], out[mxn], pos[mxn];

inline void build(int node, int st, int en){
    if(st==en){
        seg[node]=val[pos[st]];
        return;
    }
    int mid=(st+en)>>1;
    build(node<<1,st,mid);
    build(node<<1|1,mid+1,en);
    seg[node]=max(seg[node<<1],seg[node<<1|1]);
}

inline void update(int node, int st, int en, int in, int val){
    if(st==en){
        seg[node]=val;
        return;
    }
    int mid=(st+en)>>1;
    if(in<=mid) update(node<<1,st,mid,in,val);
    else update(node<<1|1,mid+1,en,in,val);
    seg[node]=max(seg[node<<1],seg[node<<1|1]); 
}

inline int query(int node, int st, int en, int l, int r){
    if(st>r || en<l) return 0;
    if(st>=l && en<=r) return seg[node];
    int mid=(st+en)>>1;
    return max(query(node<<1,st,mid,l,r),query(node<<1|1,mid+1,en,l,r));
}

inline void dfs(int node, int p, int d=0){
    dep[node]=d, par[node]=p;
    sub[node]=1;
    for(int &a : g[node]){
        if(a-p){
            dfs(a,node,d+1);
            sub[node]+=sub[a];
            if(sub[g[node][0]]<=sub[a]) swap(a,g[node][0]);
        }
    }
}

inline void dfshld(int node, int p){
    if(p==-1) head[node]=node;
    in[node]=idx;
    pos[idx++]=node;
    for(int &a : g[node]){
        if(a-p){
            head[a]=(a==g[node][0])?head[node]:a;
            dfshld(a,node);
        }
    }
    out[node]=idx;
}

inline int lca(int a, int b){
    while(head[a]!=head[b]){
        if(dep[head[a]]>dep[head[b]]) swap(a,b);
        b=par[head[b]];
    }
    if(dep[a]>dep[b]) swap(a,b);
    return a;
}

inline int queryhld(int a, int b){
    int mx=0;
    while(head[a]!=head[b]){
        if(dep[head[a]]>dep[head[b]]) swap(a,b);
        int l=in[head[b]], r=in[b];
        mx=max(mx,query(1,0,idx,l,r));
        b=par[head[b]];
    }
    if(dep[a]>dep[b]) swap(a,b);
    int l=in[a], r=in[b];
    mx=max(mx,query(1,0,idx,l,r));
    return mx;
}

int main()
{
    fastio;
    cin>>n>>q;
    for(int i=1; i<=n; i++) cin>>val[i];
    int a, b;
    for(int i=0; i<n-1; i++){
        cin>>a>>b;
        g[a].pb(b);
        g[b].pb(a);
    }
    dfs(1,-1);
    dfshld(1,-1);
    build(1,0,idx);
    while(q--){
        int tp;
        cin>>tp;
        if(tp==1){
            int s, x;
            cin>>s>>x;
            update(1,0,idx,in[s],x);
        }
        else{
            int a, b;
            cin>>a>>b;
            cout<<queryhld(a,b)<<" ";
        }
    }
    nll;
    return 0;
}