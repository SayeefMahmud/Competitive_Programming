#include<bits/stdc++.h>

using namespace std;

#define ll long long
#define fr(m) for(int i=0; i<m; i++)
#define fro(m) for(int i=1; i<m; i++)
#define frj(m) for(int j=0; j<m; j++)
#define frr(n) for(int i=n; i>=0; i--)
#define pb push_back
#define pf push_front
#define orr ||
#define nl '\n'
#define nll cout<<'\n'
#define mod 1000000007
#define inf (1LL<<62)
#define inff (1<<30)
#define yes cout<<"YES"<<nl
#define no cout<<"NO"<<nl
#define ff first
#define ss second
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL)


#define ts to_string
string ts(char c) { return string(1, c); } string ts(bool b) { return b ? "true" : "false"; } string ts(const char* s) { return (string)s; } string ts(string s) { return s; }
template<class A> string ts(complex<A> c) { stringstream ss; ss << c; return ss.str(); } string ts(vector<bool> v) {  string res = "{"; for(int i = 0; i < v.size(); ++i) res += char('0' + v[i]); res += "}"; return res; }
template<size_t SZ> string ts(bitset<SZ> b) { string res = ""; for(int i = 0; i < SZ; ++i) res += char('0' + b[i]); return res; }
template<class A, class B> string ts(pair<A,B> p);
template<class T> string ts(T v) { bool fst = 1; string res = "{"; for (const auto& x: v) { if (!fst) res += ", "; fst = 0; res += ts(x); } res += "}"; return res;}
template<class A, class B> string ts(pair<A,B> p) { return "(" + ts(p.first) + ", " + ts(p.second) + ")"; } void DBG() { cerr << "]" << endl; }
template<class H, class... T> void DBG(H h, T... t) { cerr << ts(h); if (sizeof...(t)) cerr << ", "; DBG(t...); } void EDBG(string names) { names = names; }
template<class H, class... T> void EDBG(string names, H h, T... t) { auto pos = names.find(','); auto first_name = names.substr(0, pos); auto rest = names.substr(pos + 1); while(rest.front() == ' '){ rest = rest.substr(1); } cerr << "   [" << first_name << "]: [" << ts(h) << "]" << endl; EDBG(rest, t...); }

#ifdef dbghere
#define dbg(...) cerr<<"(Line "<<__LINE__<<")"<<endl, EDBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define dbg(...) 0
#endif


const int MAX = 200005;
typedef pair<pair<ll, ll>, ll> pii;
bool marked[MAX];
vector <pair<ll, ll> > g[MAX], mst, g2[MAX], e;
vector<ll>depth(MAX,0), parent(MAX);
map<pair<ll, ll> , ll>map2, map1;
ll ancestors[200005][20]={}, maxin[200005][20]={};

ll prim(ll x)
{
    priority_queue<pii, vector<pii>, greater<pii> > q;
    ll minCost=0;
    pii p;
    q.push({{0ll, x},-1ll});
    while(!q.empty()){
        p=q.top();
        q.pop();
        x=p.ff.ss;
        if(marked[x] == true) continue;
        if(p.ss!=-1ll){
            ll c=p.ff.ss, d=p.ss;
            if(c>d) swap(c,d);
            map2[{c,d}]=p.ff.ff;
        }
        minCost+=p.ff.ff;
        marked[x]=true;
        fr(g[x].size()){
            ll y=g[x][i].ss;
            if(marked[y]==false) q.push({g[x][i],x});
        }
    }
    return minCost;
}

void dfs(ll node, ll par){
    for(pair<ll,ll> a : g2[node]){
        if(a.ss!=par){
            parent[a.ss]=node;
            depth[a.ss]=1+depth[node];
            dfs(a.ss,node);
        }
    }
}

int main()
{
    fastio;
    ll n, m;
    cin>>n>>m;
    fr(m){
        ll a, b, c;
        cin>>a>>b>>c;
        e.pb({a,b});
        g[a].pb({c,b});
        g[b].pb({c,a});
        map1[{a,b}]=c;
    }
    ll mn=prim(1);
    for(pair<pair<ll,ll>, ll> a : map2){
        g2[a.ff.ff].pb({a.ss,a.ff.ss});
        g2[a.ff.ss].pb({a.ss,a.ff.ff});
    }
    parent[1]=0;
    dfs(1,0);
    fro(n+1){
        ancestors[i][0]=parent[i];
        maxin[i][0]=max(map2[{i,parent[i]}], map2[{parent[i],i}]);
    }
    for(int i=1; i<=17; i++){
        for(int j=2; j<=n; j++){
            if(depth[j]<(1<<i)) continue;
            maxin[j][i]=max(maxin[j][i-1],maxin[ancestors[j][i-1]][i-1]);
            ancestors[j][i]=ancestors[ancestors[j][i-1]][i-1];
        }
    }
    vector<ll>ans(m);
    fr(m){
        pair<ll,ll>a=e[i], b=a;
        if(map2[a] orr map2[{a.ss,a.ff}]) ans[i]=mn;
        else{
            ll mx=0, k=abs(depth[a.ff]-depth[a.ss]);
            if(depth[a.ff]>depth[a.ss]) swap(a.ff,a.ss);
            for(int i=0; i<20; i++){
                if(k&(1<<i)){
                    mx=max(mx,maxin[a.ss][i]);
                    a.ss=ancestors[a.ss][i];
                }
            }
            if(a.ff!=a.ss){
                for(int i=20; i>=0; i--){
                    if(depth[a.ff]<(1<<i)) continue;
                    if(ancestors[a.ff][i]!=ancestors[a.ss][i]){
                        mx=max({mx,maxin[a.ff][i],maxin[a.ss][i]});
                        a.ff=ancestors[a.ff][i], a.ss=ancestors[a.ss][i];
                    }
                }
                mx=max({mx,maxin[a.ff][0],maxin[a.ss][0]});
            }
            ans[i]=mn-mx+max(map1[{b.ff,b.ss}],map1[{b.ss,b.ff}]);
        }
    }
    fr(m) cout<<ans[i]<<nl;
    return 0;
}#include<bits/stdc++.h>

using namespace std;

#define ll long long
#define fr(m) for(int i=0; i<m; i++)
#define fro(m) for(int i=1; i<m; i++)
#define frj(m) for(int j=0; j<m; j++)
#define frr(n) for(int i=n; i>=0; i--)
#define pb push_back
#define pf push_front
#define orr ||
#define nl '\n'
#define nll cout<<'\n'
#define mod 1000000007
#define inf (1LL<<62)
#define inff (1<<30)
#define yes cout<<"YES"<<nl
#define no cout<<"NO"<<nl
#define ff first
#define ss second
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL)


#define ts to_string
string ts(char c) { return string(1, c); } string ts(bool b) { return b ? "true" : "false"; } string ts(const char* s) { return (string)s; } string ts(string s) { return s; }
template<class A> string ts(complex<A> c) { stringstream ss; ss << c; return ss.str(); } string ts(vector<bool> v) {  string res = "{"; for(int i = 0; i < v.size(); ++i) res += char('0' + v[i]); res += "}"; return res; }
template<size_t SZ> string ts(bitset<SZ> b) { string res = ""; for(int i = 0; i < SZ; ++i) res += char('0' + b[i]); return res; }
template<class A, class B> string ts(pair<A,B> p);
template<class T> string ts(T v) { bool fst = 1; string res = "{"; for (const auto& x: v) { if (!fst) res += ", "; fst = 0; res += ts(x); } res += "}"; return res;}
template<class A, class B> string ts(pair<A,B> p) { return "(" + ts(p.first) + ", " + ts(p.second) + ")"; } void DBG() { cerr << "]" << endl; }
template<class H, class... T> void DBG(H h, T... t) { cerr << ts(h); if (sizeof...(t)) cerr << ", "; DBG(t...); } void EDBG(string names) { names = names; }
template<class H, class... T> void EDBG(string names, H h, T... t) { auto pos = names.find(','); auto first_name = names.substr(0, pos); auto rest = names.substr(pos + 1); while(rest.front() == ' '){ rest = rest.substr(1); } cerr << "   [" << first_name << "]: [" << ts(h) << "]" << endl; EDBG(rest, t...); }

#ifdef dbghere
#define dbg(...) cerr<<"(Line "<<__LINE__<<")"<<endl, EDBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define dbg(...) 0
#endif


const int MAX = 200005;
typedef pair<pair<ll, ll>, ll> pii;
bool marked[MAX];
vector <pair<ll, ll> > g[MAX], mst, g2[MAX], e;
vector<ll>depth(MAX,0), parent(MAX);
map<pair<ll, ll> , ll>map2, map1;
ll ancestors[200005][20]={}, maxin[200005][20]={};

ll prim(ll x)
{
    priority_queue<pii, vector<pii>, greater<pii> > q;
    ll minCost=0;
    pii p;
    q.push({{0ll, x},-1ll});
    while(!q.empty()){
        p=q.top();
        q.pop();
        x=p.ff.ss;
        if(marked[x] == true) continue;
        if(p.ss!=-1ll){
            ll c=p.ff.ss, d=p.ss;
            if(c>d) swap(c,d);
            map2[{c,d}]=p.ff.ff;
        }
        minCost+=p.ff.ff;
        marked[x]=true;
        fr(g[x].size()){
            ll y=g[x][i].ss;
            if(marked[y]==false) q.push({g[x][i],x});
        }
    }
    return minCost;
}

void dfs(ll node, ll par){
    for(pair<ll,ll> a : g2[node]){
        if(a.ss!=par){
            parent[a.ss]=node;
            depth[a.ss]=1+depth[node];
            dfs(a.ss,node);
        }
    }
}

int main()
{
    fastio;
    ll n, m;
    cin>>n>>m;
    fr(m){
        ll a, b, c;
        cin>>a>>b>>c;
        e.pb({a,b});
        g[a].pb({c,b});
        g[b].pb({c,a});
        map1[{a,b}]=c;
    }
    ll mn=prim(1);
    for(pair<pair<ll,ll>, ll> a : map2){
        g2[a.ff.ff].pb({a.ss,a.ff.ss});
        g2[a.ff.ss].pb({a.ss,a.ff.ff});
    }
    parent[1]=0;
    dfs(1,0);
    fro(n+1){
        ancestors[i][0]=parent[i];
        maxin[i][0]=max(map2[{i,parent[i]}], map2[{parent[i],i}]);
    }
    for(int i=1; i<=17; i++){
        for(int j=2; j<=n; j++){
            if(depth[j]<(1<<i)) continue;
            maxin[j][i]=max(maxin[j][i-1],maxin[ancestors[j][i-1]][i-1]);
            ancestors[j][i]=ancestors[ancestors[j][i-1]][i-1];
        }
    }
    vector<ll>ans(m);
    fr(m){
        pair<ll,ll>a=e[i], b=a;
        if(map2[a] orr map2[{a.ss,a.ff}]) ans[i]=mn;
        else{
            ll mx=0, k=abs(depth[a.ff]-depth[a.ss]);
            if(depth[a.ff]>depth[a.ss]) swap(a.ff,a.ss);
            for(int i=0; i<20; i++){
                if(k&(1<<i)){
                    mx=max(mx,maxin[a.ss][i]);
                    a.ss=ancestors[a.ss][i];
                }
            }
            if(a.ff!=a.ss){
                for(int i=20; i>=0; i--){
                    if(depth[a.ff]<(1<<i)) continue;
                    if(ancestors[a.ff][i]!=ancestors[a.ss][i]){
                        mx=max({mx,maxin[a.ff][i],maxin[a.ss][i]});
                        a.ff=ancestors[a.ff][i], a.ss=ancestors[a.ss][i];
                    }
                }
                mx=max({mx,maxin[a.ff][0],maxin[a.ss][0]});
            }
            ans[i]=mn-mx+max(map1[{b.ff,b.ss}],map1[{b.ss,b.ff}]);
        }
    }
    fr(m) cout<<ans[i]<<nl;
    return 0;
}