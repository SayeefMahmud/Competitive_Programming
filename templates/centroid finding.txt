#include<bits/stdc++.h>

using namespace std;

#define ll long long
#define fr(m) for(int i=0; i<m; i++)
#define fro(m) for(int i=1; i<m; i++)
#define frj(m) for(int j=0; j<m; j++)
#define frr(n) for(int i=n; i>=0; i--)
#define pb push_back
#define pf push_front
#define orr ||
#define nl '\n'
#define nll cout<<'\n'
#define mod 1000000007
#define inf (1LL<<62)
#define inff (1<<30)
#define yes cout<<"YES"<<nl
#define no cout<<"NO"<<nl
#define ff first
#define ss second
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)


#define ts to_string
string ts(char c) { return string(1, c); } string ts(bool b) { return b ? "true" : "false"; } string ts(const char* s) { return (string)s; } string ts(string s) { return s; }
template<class A> string ts(complex<A> c) { stringstream ss; ss << c; return ss.str(); } string ts(vector<bool> v) {  string res = "{"; for(int i = 0; i < v.size(); ++i) res += char('0' + v[i]); res += "}"; return res; }
template<size_t SZ> string ts(bitset<SZ> b) { string res = ""; for(int i = 0; i < SZ; ++i) res += char('0' + b[i]); return res; }
template<class A, class B> string ts(pair<A,B> p);
template<class T> string ts(T v) { bool fst = 1; string res = "{"; for (const auto& x: v) { if (!fst) res += ", "; fst = 0; res += ts(x); } res += "}"; return res;}
template<class A, class B> string ts(pair<A,B> p) { return "(" + ts(p.first) + ", " + ts(p.second) + ")"; } void DBG() { cerr << "]" << endl; }
template<class H, class... T> void DBG(H h, T... t) { cerr << ts(h); if (sizeof...(t)) cerr << ", "; DBG(t...); } void EDBG(string names) { names = names; }
template<class H, class... T> void EDBG(string names, H h, T... t) { auto pos = names.find(','); auto first_name = names.substr(0, pos); auto rest = names.substr(pos + 1); while(rest.front() == ' '){ rest = rest.substr(1); } cerr << "   [" << first_name << "]: [" << ts(h) << "]" << endl; EDBG(rest, t...); }

#ifdef dbghere
#define dbg(...) cerr<<"(Line "<<__LINE__<<")"<<endl, EDBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define dbg(...) 0
#endif


vector<ll>g[100005];
ll nd=-1, val, num, n, weights[100005];

ll dfs(ll node, ll par){
    ll res=0, sum=0;
    for(ll a : g[node]){
        if(a==par) continue;
        ll t1=dfs(a,node);
        sum+=t1, res=max(res,t1);
    }
    res=max(res,n-sum-1);
    weights[node]=res;
    if(res<val){
        num=1, val=res, nd=node;
    }
    else if(res==val) num++;
    return sum+1;
}

int main()
{
    fastio;
    int t, cnt=1;
    cin>>t;
    while(t--){
        cin>>n;
        fr(n+5) g[i].clear();
        ll x, y;
        fr(n-1){
            ll a, b;
            cin>>a>>b;
            x=a, y=b;
            g[a].pb(b);
            g[b].pb(a);
        }
        nd=-1, val=inf, num=0;
        ll t1=dfs(1LL, -1LL);
        if(num==1){
            cout<<x<<" "<<y<<nl<<x<<" "<<y<<nl;
        }
        else{
            //cout<<nd<< " dffd "<<val<<" "<<num<<nl;
            set<ll>s;
            ll f=0, now=-1, er=-1;
            for(int i=1; i<=n; i++){
                if(weights[i]==val && i!=nd){
                    now=i;
                    //cout<<now<<nl;
                    for(ll b : g[i]){
                        //cout<<b<<" sdf"<<nl;
                        s.insert(b);
                    }
                    goto done;
                }
            }
            done:;
            //dbg(s);
            s.erase(nd);
            er=*s.begin();
            cout<<now<<" "<<er<<nl;
            cout<<nd<<" "<<er<<nl;
        }
    }

    return 0;
}